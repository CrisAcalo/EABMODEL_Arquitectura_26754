using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;

namespace ConUni_Soap_DotNet_GR01.ec.edu.monster.ws
{
    // NOTE: You can use the "Rename" command on the "Refactor" menu to change the class name "MasaService" in code, svc and config file together.
    // NOTE: In order to launch WCF Test Client for testing this service, please select MasaService.svc or MasaService.svc.cs at the Solution Explorer and start debugging.
    public class MasaService : IMasaService
    {
        #region Conversiones Gramo <-> Onza

        /// <summary>
        /// Convierte gramos a onzas
        /// </summary>
        /// <param name="gramos">Valor en gramos</param>
        /// <returns>Valor convertido en onzas</returns>
        /// <exception cref="ArgumentException">Cuando el valor es negativo</exception>
        public double GramoAOnza(double gramos)
        {
            ValidarValorPositivo(gramos, "gramos");
            // 1 gramo = 0.035274 onzas
            return gramos * 0.035274;
        }

        /// <summary>
        /// Convierte onzas a gramos
        /// </summary>
        /// <param name="onzas">Valor en onzas</param>
        /// <returns>Valor convertido en gramos</returns>
        /// <exception cref="ArgumentException">Cuando el valor es negativo</exception>
        public double OnzaAGramo(double onzas)
        {
            ValidarValorPositivo(onzas, "onzas");
            // 1 onza = 28.3495 gramos
            return onzas * 28.3495;
        }

        #endregion

        #region Conversiones Gramo <-> Libra

        /// <summary>
        /// Convierte gramos a libras
        /// </summary>
        /// <param name="gramos">Valor en gramos</param>
        /// <returns>Valor convertido en libras</returns>
        /// <exception cref="ArgumentException">Cuando el valor es negativo</exception>
        public double GramoALibra(double gramos)
        {
            ValidarValorPositivo(gramos, "gramos");
            // 1 gramo = 0.00220462 libras
            return gramos * 0.00220462;
        }

        /// <summary>
        /// Convierte libras a gramos
        /// </summary>
        /// <param name="libras">Valor en libras</param>
        /// <returns>Valor convertido en gramos</returns>
        /// <exception cref="ArgumentException">Cuando el valor es negativo</exception>
        public double LibraAGramo(double libras)
        {
            ValidarValorPositivo(libras, "libras");
            // 1 libra = 453.592 gramos
            return libras * 453.592;
        }

        #endregion

        #region Conversiones Kilogramo <-> Quintal

        /// <summary>
        /// Convierte kilogramos a quintales
        /// </summary>
        /// <param name="kilogramos">Valor en kilogramos</param>
        /// <returns>Valor convertido en quintales</returns>
        /// <exception cref="ArgumentException">Cuando el valor es negativo</exception>
        public double KilogramoAQuintal(double kilogramos)
        {
            ValidarValorPositivo(kilogramos, "kilogramos");
            // 1 kilogramo = 0.01 quintales (1 quintal = 100 kg)
            return kilogramos * 0.01;
        }

        /// <summary>
        /// Convierte quintales a kilogramos
        /// </summary>
        /// <param name="quintales">Valor en quintales</param>
        /// <returns>Valor convertido en kilogramos</returns>
        /// <exception cref="ArgumentException">Cuando el valor es negativo</exception>
        public double QuintalAKilogramo(double quintales)
        {
            ValidarValorPositivo(quintales, "quintales");
            // 1 quintal = 100 kilogramos
            return quintales * 100.0;
        }

        #endregion

        #region Métodos de Validación

        /// <summary>
        /// Valida que el valor sea positivo o cero
        /// </summary>
        /// <param name="valor">Valor a validar</param>
        /// <param name="unidad">Nombre de la unidad para el mensaje de error</param>
        /// <exception cref="ArgumentException">Cuando el valor es negativo</exception>
        private void ValidarValorPositivo(double valor, string unidad)
        {
            if (valor < 0)
            {
                throw new ArgumentException($"El valor en {unidad} no puede ser negativo. Valor recibido: {valor}");
            }

            if (double.IsNaN(valor))
            {
                throw new ArgumentException($"El valor en {unidad} no es un número válido.");
            }

            if (double.IsInfinity(valor))
            {
                throw new ArgumentException($"El valor en {unidad} no puede ser infinito.");
            }
        }

        #endregion
    }
}
