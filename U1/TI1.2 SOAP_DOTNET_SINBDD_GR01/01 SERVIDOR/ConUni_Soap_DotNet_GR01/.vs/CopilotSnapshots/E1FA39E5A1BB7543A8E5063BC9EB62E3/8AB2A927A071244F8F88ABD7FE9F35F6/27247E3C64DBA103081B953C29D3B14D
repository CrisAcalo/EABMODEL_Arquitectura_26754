using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;

namespace ConUni_Soap_DotNet_GR01.ec.edu.monster.ws
{
    // NOTE: You can use the "Rename" command on the "Refactor" menu to change the class name "TemperaturaService" in code, svc and config file together.
    // NOTE: In order to launch WCF Test Client for testing this service, please select TemperaturaService.svc or TemperaturaService.svc.cs at the Solution Explorer and start debugging.
    public class TemperaturaService : ITemperaturaService
    {
        #region Conversiones Celsius <-> Fahrenheit

        /// <summary>
        /// Convierte grados Celsius a Fahrenheit
        /// </summary>
        /// <param name="celsius">Valor en grados Celsius</param>
        /// <returns>Valor convertido en grados Fahrenheit</returns>
        /// <exception cref="ArgumentException">Cuando el valor es inválido</exception>
        public double CelsiusAFahrenheit(double celsius)
        {
            ValidarTemperaturaCelsius(celsius);
            // °F = (°C × 9/5) + 32
            return (celsius * 9.0 / 5.0) + 32.0;
        }

        /// <summary>
        /// Convierte grados Fahrenheit a Celsius
        /// </summary>
        /// <param name="fahrenheit">Valor en grados Fahrenheit</param>
        /// <returns>Valor convertido en grados Celsius</returns>
        /// <exception cref="ArgumentException">Cuando el valor es inválido</exception>
        public double FahrenheitACelsius(double fahrenheit)
        {
            ValidarTemperaturaFahrenheit(fahrenheit);
            // °C = (°F - 32) × 5/9
            return (fahrenheit - 32.0) * 5.0 / 9.0;
        }

        #endregion

        #region Conversiones Fahrenheit <-> Kelvin

        /// <summary>
        /// Convierte grados Fahrenheit a Kelvin
        /// </summary>
        /// <param name="fahrenheit">Valor en grados Fahrenheit</param>
        /// <returns>Valor convertido en Kelvin</returns>
        /// <exception cref="ArgumentException">Cuando el valor es inválido</exception>
        public double FahrenheitAKelvin(double fahrenheit)
        {
            ValidarTemperaturaFahrenheit(fahrenheit);
            // K = (°F - 32) × 5/9 + 273.15
            return (fahrenheit - 32.0) * 5.0 / 9.0 + 273.15;
        }

        /// <summary>
        /// Convierte Kelvin a grados Fahrenheit
        /// </summary>
        /// <param name="kelvin">Valor en Kelvin</param>
        /// <returns>Valor convertido en grados Fahrenheit</returns>
        /// <exception cref="ArgumentException">Cuando el valor es inválido</exception>
        public double KelvinAFahrenheit(double kelvin)
        {
            ValidarTemperaturaKelvin(kelvin);
            // °F = (K - 273.15) × 9/5 + 32
            return (kelvin - 273.15) * 9.0 / 5.0 + 32.0;
        }

        #endregion

        #region Conversiones Kelvin <-> Celsius

        /// <summary>
        /// Convierte Kelvin a grados Celsius
        /// </summary>
        /// <param name="kelvin">Valor en Kelvin</param>
        /// <returns>Valor convertido en grados Celsius</returns>
        /// <exception cref="ArgumentException">Cuando el valor es inválido</exception>
        public double KelvinACelsius(double kelvin)
        {
            ValidarTemperaturaKelvin(kelvin);
            // °C = K - 273.15
            return kelvin - 273.15;
        }

        /// <summary>
        /// Convierte grados Celsius a Kelvin
        /// </summary>
        /// <param name="celsius">Valor en grados Celsius</param>
        /// <returns>Valor convertido en Kelvin</returns>
        /// <exception cref="ArgumentException">Cuando el valor es inválido</exception>
        public double CelsiusAKelvin(double celsius)
        {
            ValidarTemperaturaCelsius(celsius);
            // K = °C + 273.15
            return celsius + 273.15;
        }

        #endregion

        #region Métodos de Validación

        /// <summary>
        /// Valida que la temperatura en Celsius sea válida
        /// </summary>
        /// <param name="celsius">Temperatura en Celsius</param>
        /// <exception cref="ArgumentException">Cuando la temperatura es inválida</exception>
        private void ValidarTemperaturaCelsius(double celsius)
        {
            ValidarNumeroValido(celsius, "Celsius");
            
            // El cero absoluto es -273.15°C
            if (celsius < -273.15)
            {
                throw new ArgumentException($"La temperatura en Celsius no puede ser menor al cero absoluto (-273.15°C). Valor recibido: {celsius}°C");
            }
        }

        /// <summary>
        /// Valida que la temperatura en Fahrenheit sea válida
        /// </summary>
        /// <param name="fahrenheit">Temperatura en Fahrenheit</param>
        /// <exception cref="ArgumentException">Cuando la temperatura es inválida</exception>
        private void ValidarTemperaturaFahrenheit(double fahrenheit)
        {
            ValidarNumeroValido(fahrenheit, "Fahrenheit");
            
            // El cero absoluto es -459.67°F
            if (fahrenheit < -459.67)
            {
                throw new ArgumentException($"La temperatura en Fahrenheit no puede ser menor al cero absoluto (-459.67°F). Valor recibido: {fahrenheit}°F");
            }
        }

        /// <summary>
        /// Valida que la temperatura en Kelvin sea válida
        /// </summary>
        /// <param name="kelvin">Temperatura en Kelvin</param>
        /// <exception cref="ArgumentException">Cuando la temperatura es inválida</exception>
        private void ValidarTemperaturaKelvin(double kelvin)
        {
            ValidarNumeroValido(kelvin, "Kelvin");
            
            // El cero absoluto es 0K
            if (kelvin < 0)
            {
                throw new ArgumentException($"La temperatura en Kelvin no puede ser negativa (cero absoluto = 0K). Valor recibido: {kelvin}K");
            }
        }

        /// <summary>
        /// Valida que el número sea válido (no NaN ni infinito)
        /// </summary>
        /// <param name="valor">Valor a validar</param>
        /// <param name="unidad">Nombre de la unidad para el mensaje de error</param>
        /// <exception cref="ArgumentException">Cuando el valor es inválido</exception>
        private void ValidarNumeroValido(double valor, string unidad)
        {
            if (double.IsNaN(valor))
            {
                throw new ArgumentException($"El valor en {unidad} no es un número válido.");
            }

            if (double.IsInfinity(valor))
            {
                throw new ArgumentException($"El valor en {unidad} no puede ser infinito.");
            }
        }

        #endregion
    }
}
