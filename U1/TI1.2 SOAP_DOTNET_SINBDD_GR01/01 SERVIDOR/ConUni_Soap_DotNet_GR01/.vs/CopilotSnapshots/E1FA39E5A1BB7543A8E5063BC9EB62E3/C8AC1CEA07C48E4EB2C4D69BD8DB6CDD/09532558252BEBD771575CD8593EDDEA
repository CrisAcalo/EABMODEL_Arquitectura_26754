using System;
using ConUni_Soap_DotNet_GR01.ec.edu.monster.services;

namespace ConUni_Soap_DotNet_GR01.ec.edu.monster.ws
{
    /// <summary>
    /// Servicio WCF para conversiones de longitud
    /// Actúa como capa de presentación delegando la lógica de negocio
    /// </summary>
    public class LongitudService : ILongitudService
    {
        private readonly LongitudBusinessService _longitudBusinessService;

        /// <summary>
        /// Constructor que inicializa el servicio de negocio
        /// </summary>
        public LongitudService()
        {
            _longitudBusinessService = new LongitudBusinessService();
        }

        #region Conversiones Kilómetro <-> Milla

        /// <summary>
        /// Convierte kilómetros a millas (resultado redondeado a 2 decimales)
        /// </summary>
        /// <param name="kilometros">Valor en kilómetros</param>
        /// <returns>Valor convertido en millas (redondeado a 2 decimales)</returns>
        /// <exception cref="ArgumentException">Cuando el valor es negativo</exception>
        public double KilometroAMilla(double kilometros)
        {
            try
            {
                var resultado = _longitudBusinessService.ConvertirKilometroAMilla(kilometros);
                return resultado.ValorConvertidoRedondeado;
            }
            catch (ArgumentException)
            {
                throw; // Re-lanzar excepciones de validación
            }
            catch (Exception ex)
            {
                throw new Exception($"Error interno en la conversión de kilómetros a millas: {ex.Message}", ex);
            }
        }

        /// <summary>
        /// Convierte millas a kilómetros (resultado redondeado a 2 decimales)
        /// </summary>
        /// <param name="millas">Valor en millas</param>
        /// <returns>Valor convertido en kilómetros (redondeado a 2 decimales)</returns>
        /// <exception cref="ArgumentException">Cuando el valor es negativo</exception>
        public double MillaAKilometro(double millas)
        {
            try
            {
                var resultado = _longitudBusinessService.ConvertirMillaAKilometro(millas);
                return resultado.ValorConvertidoRedondeado;
            }
            catch (ArgumentException)
            {
                throw; // Re-lanzar excepciones de validación
            }
            catch (Exception ex)
            {
                throw new Exception($"Error interno en la conversión de millas a kilómetros: {ex.Message}", ex);
            }
        }

        #endregion

        #region Conversiones Metro <-> Pie

        /// <summary>
        /// Convierte metros a pies (resultado redondeado a 2 decimales)
        /// </summary>
        /// <param name="metros">Valor en metros</param>
        /// <returns>Valor convertido en pies (redondeado a 2 decimales)</returns>
        /// <exception cref="ArgumentException">Cuando el valor es negativo</exception>
        public double MetroAPie(double metros)
        {
            try
            {
                var resultado = _longitudBusinessService.ConvertirMetroAPie(metros);
                return resultado.ValorConvertidoRedondeado;
            }
            catch (ArgumentException)
            {
                throw; // Re-lanzar excepciones de validación
            }
            catch (Exception ex)
            {
                throw new Exception($"Error interno en la conversión de metros a pies: {ex.Message}", ex);
            }
        }

        /// <summary>
        /// Convierte pies a metros (resultado redondeado a 2 decimales)
        /// </summary>
        /// <param name="pies">Valor en pies</param>
        /// <returns>Valor convertido en metros (redondeado a 2 decimales)</returns>
        /// <exception cref="ArgumentException">Cuando el valor es negativo</exception>
        public double PieAMetro(double pies)
        {
            try
            {
                var resultado = _longitudBusinessService.ConvertirPieAMetro(pies);
                return resultado.ValorConvertidoRedondeado;
            }
            catch (ArgumentException)
            {
                throw; // Re-lanzar excepciones de validación
            }
            catch (Exception ex)
            {
                throw new Exception($"Error interno en la conversión de pies a metros: {ex.Message}", ex);
            }
        }

        #endregion

        #region Conversiones Centímetro <-> Pulgada

        /// <summary>
        /// Convierte centímetros a pulgadas (resultado redondeado a 2 decimales)
        /// </summary>
        /// <param name="centimetros">Valor en centímetros</param>
        /// <returns>Valor convertido en pulgadas (redondeado a 2 decimales)</returns>
        /// <exception cref="ArgumentException">Cuando el valor es negativo</exception>
        public double CentimetroAPulgada(double centimetros)
        {
            try
            {
                var resultado = _longitudBusinessService.ConvertirCentimetroAPulgada(centimetros);
                return resultado.ValorConvertidoRedondeado;
            }
            catch (ArgumentException)
            {
                throw; // Re-lanzar excepciones de validación
            }
            catch (Exception ex)
            {
                throw new Exception($"Error interno en la conversión de centímetros a pulgadas: {ex.Message}", ex);
            }
        }

        /// <summary>
        /// Convierte pulgadas a centímetros (resultado redondeado a 2 decimales)
        /// </summary>
        /// <param name="pulgadas">Valor en pulgadas</param>
        /// <returns>Valor convertido en centímetros (redondeado a 2 decimales)</returns>
        /// <exception cref="ArgumentException">Cuando el valor es negativo</exception>
        public double PulgadaACentimetro(double pulgadas)
        {
            try
            {
                var resultado = _longitudBusinessService.ConvertirPulgadaACentimetro(pulgadas);
                return resultado.ValorConvertidoRedondeado;
            }
            catch (ArgumentException)
            {
                throw; // Re-lanzar excepciones de validación
            }
            catch (Exception ex)
            {
                throw new Exception($"Error interno en la conversión de pulgadas a centímetros: {ex.Message}", ex);
            }
        }

        #endregion
    }
}
