using ConUni_Soap_DotNet_GR01.ec.edu.monster.constants;
using ConUni_Soap_DotNet_GR01.ec.edu.monster.models;
using ConUni_Soap_DotNet_GR01.ec.edu.monster.validators;

namespace ConUni_Soap_DotNet_GR01.ec.edu.monster.services
{
    /// <summary>
    /// Servicio de negocio para conversiones de longitud
    /// </summary>
    public class LongitudBusinessService
    {
        /// <summary>
        /// Convierte kilómetros a millas y retorna información detallada
        /// </summary>
        public UnidadConversion ConvertirKilometroAMilla(double kilometros)
        {
            BaseValidator.ValidarValorPositivo(kilometros, LongitudConstants.KILOMETRO);
            
            double resultado = kilometros * LongitudConstants.KILOMETRO_A_MILLA;
            
            return new UnidadConversion(
                kilometros, 
                resultado, 
                LongitudConstants.KILOMETRO, 
                LongitudConstants.MILLA, 
                LongitudConstants.KILOMETRO_A_MILLA
            );
        }

        /// <summary>
        /// Convierte millas a kilómetros y retorna información detallada
        /// </summary>
        public UnidadConversion ConvertirMillaAKilometro(double millas)
        {
            BaseValidator.ValidarValorPositivo(millas, LongitudConstants.MILLA);
            
            double resultado = millas * LongitudConstants.MILLA_A_KILOMETRO;
            
            return new UnidadConversion(
                millas, 
                resultado, 
                LongitudConstants.MILLA, 
                LongitudConstants.KILOMETRO, 
                LongitudConstants.MILLA_A_KILOMETRO
            );
        }

        /// <summary>
        /// Convierte metros a pies y retorna información detallada
        /// </summary>
        public UnidadConversion ConvertirMetroAPie(double metros)
        {
            BaseValidator.ValidarValorPositivo(metros, LongitudConstants.METRO);
            
            double resultado = metros * LongitudConstants.METRO_A_PIE;
            
            return new UnidadConversion(
                metros, 
                resultado, 
                LongitudConstants.METRO, 
                LongitudConstants.PIE, 
                LongitudConstants.METRO_A_PIE
            );
        }

        /// <summary>
        /// Convierte pies a metros y retorna información detallada
        /// </summary>
        public UnidadConversion ConvertirPieAMetro(double pies)
        {
            BaseValidator.ValidarValorPositivo(pies, LongitudConstants.PIE);
            
            double resultado = pies * LongitudConstants.PIE_A_METRO;
            
            return new UnidadConversion(
                pies, 
                resultado, 
                LongitudConstants.PIE, 
                LongitudConstants.METRO, 
                LongitudConstants.PIE_A_METRO
            );
        }

        /// <summary>
        /// Convierte centímetros a pulgadas y retorna información detallada
        /// </summary>
        public UnidadConversion ConvertirCentimetroAPulgada(double centimetros)
        {
            BaseValidator.ValidarValorPositivo(centimetros, LongitudConstants.CENTIMETRO);
            
            double resultado = centimetros * LongitudConstants.CENTIMETRO_A_PULGADA;
            
            return new UnidadConversion(
                centimetros, 
                resultado, 
                LongitudConstants.CENTIMETRO, 
                LongitudConstants.PULGADA, 
                LongitudConstants.CENTIMETRO_A_PULGADA
            );
        }

        /// <summary>
        /// Convierte pulgadas a centímetros y retorna información detallada
        /// </summary>
        public UnidadConversion ConvertirPulgadaACentimetro(double pulgadas)
        {
            BaseValidator.ValidarValorPositivo(pulgadas, LongitudConstants.PULGADA);
            
            double resultado = pulgadas * LongitudConstants.PULGADA_A_CENTIMETRO;
            
            return new UnidadConversion(
                pulgadas, 
                resultado, 
                LongitudConstants.PULGADA, 
                LongitudConstants.CENTIMETRO, 
                LongitudConstants.PULGADA_A_CENTIMETRO
            );
        }
    }
}