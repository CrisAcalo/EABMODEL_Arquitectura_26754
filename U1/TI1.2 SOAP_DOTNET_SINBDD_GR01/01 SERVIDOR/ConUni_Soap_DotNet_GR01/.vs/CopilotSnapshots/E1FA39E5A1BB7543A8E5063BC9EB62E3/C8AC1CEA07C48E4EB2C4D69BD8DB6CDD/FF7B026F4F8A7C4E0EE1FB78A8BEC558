using System;
using ConUni_Soap_DotNet_GR01.ec.edu.monster.constants;

namespace ConUni_Soap_DotNet_GR01.ec.edu.monster.validators
{
    /// <summary>
    /// Clase base para validaciones comunes
    /// </summary>
    public static class BaseValidator
    {
        /// <summary>
        /// Valida que el número sea válido (no NaN ni infinito)
        /// </summary>
        /// <param name="valor">Valor a validar</param>
        /// <param name="unidad">Nombre de la unidad para el mensaje de error</param>
        /// <exception cref="ArgumentException">Cuando el valor es inválido</exception>
        public static void ValidarNumeroValido(double valor, string unidad)
        {
            if (double.IsNaN(valor))
            {
                throw new ArgumentException($"El valor en {unidad} no es un número válido.");
            }

            if (double.IsInfinity(valor))
            {
                throw new ArgumentException($"El valor en {unidad} no puede ser infinito.");
            }
        }

        /// <summary>
        /// Valida que el valor sea positivo o cero
        /// </summary>
        /// <param name="valor">Valor a validar</param>
        /// <param name="unidad">Nombre de la unidad para el mensaje de error</param>
        /// <exception cref="ArgumentException">Cuando el valor es negativo</exception>
        public static void ValidarValorPositivo(double valor, string unidad)
        {
            ValidarNumeroValido(valor, unidad);
            
            if (valor < 0)
            {
                throw new ArgumentException($"El valor en {unidad} no puede ser negativo. Valor recibido: {valor}");
            }
        }
    }

    /// <summary>
    /// Validador específico para temperaturas
    /// </summary>
    public static class TemperaturaValidator
    {
        /// <summary>
        /// Valida que la temperatura en Celsius sea válida
        /// </summary>
        /// <param name="celsius">Temperatura en Celsius</param>
        /// <exception cref="ArgumentException">Cuando la temperatura es inválida</exception>
        public static void ValidarTemperaturaCelsius(double celsius)
        {
            BaseValidator.ValidarNumeroValido(celsius, TemperaturaConstants.CELSIUS);
            
            if (celsius < TemperaturaConstants.CERO_ABSOLUTO_CELSIUS)
            {
                throw new ArgumentException($"La temperatura en Celsius no puede ser menor al cero absoluto ({TemperaturaConstants.CERO_ABSOLUTO_CELSIUS}°C). Valor recibido: {celsius}°C");
            }
        }

        /// <summary>
        /// Valida que la temperatura en Fahrenheit sea válida
        /// </summary>
        /// <param name="fahrenheit">Temperatura en Fahrenheit</param>
        /// <exception cref="ArgumentException">Cuando la temperatura es inválida</exception>
        public static void ValidarTemperaturaFahrenheit(double fahrenheit)
        {
            BaseValidator.ValidarNumeroValido(fahrenheit, TemperaturaConstants.FAHRENHEIT);
            
            if (fahrenheit < TemperaturaConstants.CERO_ABSOLUTO_FAHRENHEIT)
            {
                throw new ArgumentException($"La temperatura en Fahrenheit no puede ser menor al cero absoluto ({TemperaturaConstants.CERO_ABSOLUTO_FAHRENHEIT}°F). Valor recibido: {fahrenheit}°F");
            }
        }

        /// <summary>
        /// Valida que la temperatura en Kelvin sea válida
        /// </summary>
        /// <param name="kelvin">Temperatura en Kelvin</param>
        /// <exception cref="ArgumentException">Cuando la temperatura es inválida</exception>
        public static void ValidarTemperaturaKelvin(double kelvin)
        {
            BaseValidator.ValidarNumeroValido(kelvin, TemperaturaConstants.KELVIN);
            
            if (kelvin < TemperaturaConstants.CERO_ABSOLUTO_KELVIN)
            {
                throw new ArgumentException($"La temperatura en Kelvin no puede ser negativa (cero absoluto = {TemperaturaConstants.CERO_ABSOLUTO_KELVIN}K). Valor recibido: {kelvin}K");
            }
        }
    }
}