using ConUni_Soap_DotNet_GR01.ec.edu.monster.constants;
using ConUni_Soap_DotNet_GR01.ec.edu.monster.models;
using ConUni_Soap_DotNet_GR01.ec.edu.monster.validators;

namespace ConUni_Soap_DotNet_GR01.ec.edu.monster.services
{
    /// <summary>
    /// Servicio de negocio para conversiones de longitud
    /// </summary>
    public class LongitudBusinessService
    {
        #region Conversiones Milla <-> Metro

        /// <summary>
        /// Convierte millas a metros y retorna resultado con manejo de errores
        /// </summary>
        public ConversionResult ConvertirMillaAMetro(string millasString)
        {
            // Validar y convertir string a double
            var error = BaseValidator.ValidarStringPositivo(millasString, LongitudConstants.MILLA, out double millas);
            if (error != null)
                return ConversionResult.Fallo(error);

            try
            {
                double resultadoExacto = millas * LongitudConstants.MILLA_A_METRO;
                
                var conversion = new UnidadConversion(
                    millas, 
                    resultadoExacto, 
                    LongitudConstants.MILLA, 
                    LongitudConstants.METRO, 
                    LongitudConstants.MILLA_A_METRO
                );

                return ConversionResult.Exito(conversion);
            }
            catch (System.Exception ex)
            {
                var errorInterno = new ConversionError(
                    ErrorConstants.ERROR_CONVERSION_LONGITUD,
                    "Error en la conversión de millas a metros",
                    ErrorConstants.TIPO_CONVERSION,
                    millas,
                    LongitudConstants.MILLA,
                    ex.Message
                );
                return ConversionResult.Fallo(errorInterno);
            }
        }

        /// <summary>
        /// Convierte metros a millas y retorna resultado con manejo de errores
        /// </summary>
        public ConversionResult ConvertirMetroAMilla(string metrosString)
        {
            // Validar y convertir string a double
            var error = BaseValidator.ValidarStringPositivo(metrosString, LongitudConstants.METRO, out double metros);
            if (error != null)
                return ConversionResult.Fallo(error);

            try
            {
                double resultadoExacto = metros * LongitudConstants.METRO_A_MILLA;
                
                var conversion = new UnidadConversion(
                    metros, 
                    resultadoExacto, 
                    LongitudConstants.METRO, 
                    LongitudConstants.MILLA, 
                    LongitudConstants.METRO_A_MILLA
                );

                return ConversionResult.Exito(conversion);
            }
            catch (System.Exception ex)
            {
                var errorInterno = new ConversionError(
                    ErrorConstants.ERROR_CONVERSION_LONGITUD,
                    "Error en la conversión de metros a millas",
                    ErrorConstants.TIPO_CONVERSION,
                    metros,
                    LongitudConstants.METRO,
                    ex.Message
                );
                return ConversionResult.Fallo(errorInterno);
            }
        }

        #endregion

        #region Conversiones Milla <-> Pulgada

        /// <summary>
        /// Convierte millas a pulgadas y retorna resultado con manejo de errores
        /// </summary>
        public ConversionResult ConvertirMillaAPulgada(string millasString)
        {
            // Validar y convertir string a double
            var error = BaseValidator.ValidarStringPositivo(millasString, LongitudConstants.MILLA, out double millas);
            if (error != null)
                return ConversionResult.Fallo(error);

            try
            {
                double resultadoExacto = millas * LongitudConstants.MILLA_A_PULGADA;
                
                var conversion = new UnidadConversion(
                    millas, 
                    resultadoExacto, 
                    LongitudConstants.MILLA, 
                    LongitudConstants.PULGADA, 
                    LongitudConstants.MILLA_A_PULGADA
                );

                return ConversionResult.Exito(conversion);
            }
            catch (System.Exception ex)
            {
                var errorInterno = new ConversionError(
                    ErrorConstants.ERROR_CONVERSION_LONGITUD,
                    "Error en la conversión de millas a pulgadas",
                    ErrorConstants.TIPO_CONVERSION,
                    millas,
                    LongitudConstants.MILLA,
                    ex.Message
                );
                return ConversionResult.Fallo(errorInterno);
            }
        }

        /// <summary>
        /// Convierte pulgadas a millas y retorna resultado con manejo de errores
        /// </summary>
        public ConversionResult ConvertirPulgadaAMilla(string pulgadasString)
        {
            // Validar y convertir string a double
            var error = BaseValidator.ValidarStringPositivo(pulgadasString, LongitudConstants.PULGADA, out double pulgadas);
            if (error != null)
                return ConversionResult.Fallo(error);

            try
            {
                double resultadoExacto = pulgadas * LongitudConstants.PULGADA_A_MILLA;
                
                var conversion = new UnidadConversion(
                    pulgadas, 
                    resultadoExacto, 
                    LongitudConstants.PULGADA, 
                    LongitudConstants.MILLA, 
                    LongitudConstants.PULGADA_A_MILLA
                );

                return ConversionResult.Exito(conversion);
            }
            catch (System.Exception ex)
            {
                var errorInterno = new ConversionError(
                    ErrorConstants.ERROR_CONVERSION_LONGITUD,
                    "Error en la conversión de pulgadas a millas",
                    ErrorConstants.TIPO_CONVERSION,
                    pulgadas,
                    LongitudConstants.PULGADA,
                    ex.Message
                );
                return ConversionResult.Fallo(errorInterno);
            }
        }

        #endregion

        #region Conversiones Metro <-> Pulgada

        /// <summary>
        /// Convierte metros a pulgadas y retorna resultado con manejo de errores
        /// </summary>
        public ConversionResult ConvertirMetroAPulgada(string metrosString)
        {
            // Validar y convertir string a double
            var error = BaseValidator.ValidarStringPositivo(metrosString, LongitudConstants.METRO, out double metros);
            if (error != null)
                return ConversionResult.Fallo(error);

            try
            {
                double resultadoExacto = metros * LongitudConstants.METRO_A_PULGADA;
                
                var conversion = new UnidadConversion(
                    metros, 
                    resultadoExacto, 
                    LongitudConstants.METRO, 
                    LongitudConstants.PULGADA, 
                    LongitudConstants.METRO_A_PULGADA
                );

                return ConversionResult.Exito(conversion);
            }
            catch (System.Exception ex)
            {
                var errorInterno = new ConversionError(
                    ErrorConstants.ERROR_CONVERSION_LONGITUD,
                    "Error en la conversión de metros a pulgadas",
                    ErrorConstants.TIPO_CONVERSION,
                    metros,
                    LongitudConstants.METRO,
                    ex.Message
                );
                return ConversionResult.Fallo(errorInterno);
            }
        }

        /// <summary>
        /// Convierte pulgadas a metros y retorna resultado con manejo de errores
        /// </summary>
        public ConversionResult ConvertirPulgadaAMetro(string pulgadasString)
        {
            // Validar y convertir string a double
            var error = BaseValidator.ValidarStringPositivo(pulgadasString, LongitudConstants.PULGADA, out double pulgadas);
            if (error != null)
                return ConversionResult.Fallo(error);

            try
            {
                double resultadoExacto = pulgadas * LongitudConstants.PULGADA_A_METRO;
                
                var conversion = new UnidadConversion(
                    pulgadas, 
                    resultadoExacto, 
                    LongitudConstants.PULGADA, 
                    LongitudConstants.METRO, 
                    LongitudConstants.PULGADA_A_METRO
                );

                return ConversionResult.Exito(conversion);
            }
            catch (System.Exception ex)
            {
                var errorInterno = new ConversionError(
                    ErrorConstants.ERROR_CONVERSION_LONGITUD,
                    "Error en la conversión de pulgadas a metros",
                    ErrorConstants.TIPO_CONVERSION,
                    pulgadas,
                    LongitudConstants.PULGADA,
                    ex.Message
                );
                return ConversionResult.Fallo(errorInterno);
            }
        }

        #endregion
    }
}