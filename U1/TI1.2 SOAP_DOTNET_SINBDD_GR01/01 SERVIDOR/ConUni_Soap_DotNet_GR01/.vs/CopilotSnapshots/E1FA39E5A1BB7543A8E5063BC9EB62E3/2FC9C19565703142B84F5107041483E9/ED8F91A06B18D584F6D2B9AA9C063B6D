# Ejemplos de Uso - Conversiones con Resultados Exactos y Redondeados

## 🎯 Nueva Funcionalidad: Doble Precisión

Ahora todos los servicios proporcionan:
- **Valor Exacto**: Resultado matemático preciso sin redondeo
- **Valor Redondeado**: Resultado limitado a 2 decimales para presentación

## 📊 Ejemplos de Conversión

### Longitud
```csharp
// Ejemplo: 10 kilómetros a millas
var conversion = longitudService.ConvertirKilometroAMilla(10.0);

Console.WriteLine($"Valor Original: {conversion.ValorOriginal} {conversion.UnidadOrigen}");
Console.WriteLine($"Valor Exacto: {conversion.ValorConvertidoExacto} {conversion.UnidadDestino}");
Console.WriteLine($"Valor Redondeado: {conversion.ValorConvertidoRedondeado} {conversion.UnidadDestino}");

// Salida:
// Valor Original: 10 Kilómetro
// Valor Exacto: 6.21371 Milla
// Valor Redondeado: 6.21 Milla
```

### Masa
```csharp
// Ejemplo: 1000 gramos a onzas
var conversion = masaService.ConvertirGramoAOnza(1000.0);

Console.WriteLine($"Valor Original: {conversion.ValorOriginal} {conversion.UnidadOrigen}");
Console.WriteLine($"Valor Exacto: {conversion.ValorConvertidoExacto} {conversion.UnidadDestino}");
Console.WriteLine($"Valor Redondeado: {conversion.ValorConvertidoRedondeado} {conversion.UnidadDestino}");

// Salida:
// Valor Original: 1000 Gramo
// Valor Exacto: 35.274 Onza
// Valor Redondeado: 35.27 Onza
```

### Temperatura
```csharp
// Ejemplo: 25 Celsius a Fahrenheit
var conversion = temperaturaService.ConvertirCelsiusAFahrenheit(25.0);

Console.WriteLine($"Valor Original: {conversion.ValorOriginal} {conversion.UnidadOrigen}");
Console.WriteLine($"Valor Exacto: {conversion.ValorConvertidoExacto} {conversion.UnidadDestino}");
Console.WriteLine($"Valor Redondeado: {conversion.ValorConvertidoRedondeado} {conversion.UnidadDestino}");

// Salida:
// Valor Original: 25 Celsius
// Valor Exacto: 77 Fahrenheit
// Valor Redondeado: 77.00 Fahrenheit
```

## 🌐 Servicios WCF

Los servicios WCF retornan el **valor redondeado** por defecto:

```csharp
// Cliente WCF recibe valor redondeado a 2 decimales
double resultado = wcfService.KilometroAMilla(10.0); // 6.21
```

## 🏗️ Beneficios de la Arquitectura

### ✅ Precisión Matemática
- **Valor Exacto**: Para cálculos científicos o encadenados
- **Valor Redondeado**: Para presentación al usuario final

### ✅ Flexibilidad de Uso
- **Servicios de Negocio**: Devuelven objeto completo con ambos valores
- **Servicios WCF**: Retornan valor redondeado para simplicidad de API

### ✅ Información Completa
```csharp
public class UnidadConversion
{
    public double ValorOriginal { get; set; }
    public double ValorConvertidoExacto { get; set; }      // SIN redondeo
    public double ValorConvertidoRedondeado { get; set; }  // CON redondeo a 2 decimales
    public string UnidadOrigen { get; set; }
    public string UnidadDestino { get; set; }
    public double FactorConversion { get; set; }
    public DateTime FechaConversion { get; set; }
}
```

## 🔍 Casos de Uso

### Caso 1: Presentación a Usuario
```csharp
// Para mostrar en UI
double valorParaUI = servicio.KilometroAMilla(5.0); // 3.11 (redondeado)
```

### Caso 2: Cálculos Científicos
```csharp
// Para cálculos posteriores
var conversion = businessService.ConvertirKilometroAMilla(5.0);
double valorExacto = conversion.ValorConvertidoExacto; // 3.106855 (exacto)
```

### Caso 3: Auditoría Completa
```csharp
// Para logs o auditoría
var conversion = businessService.ConvertirMetroAPie(1.5);
string log = conversion.ToString(); 
// "1.5 Metro = 4.92 Pie (Exacto: 4.92126)"
```

## 🎯 Resumen de Mejoras

✅ **Doble precisión**: Exacto + Redondeado  
✅ **Redondeo automático**: Math.Round(valor, 2)  
✅ **API consistente**: Todos los servicios funcionan igual  
✅ **Compatibilidad**: Los servicios WCF siguen retornando double  
✅ **Información completa**: Metadatos de conversión incluidos  
✅ **ToString() mejorado**: Formato legible con ambos valores  

---
*Ahora tienes máxima precisión cuando la necesitas y simplicidad cuando la prefieres.*